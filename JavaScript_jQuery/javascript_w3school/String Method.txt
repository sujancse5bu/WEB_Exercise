
1. str.length;   
	Returns the length;

2. str.indexOf("Some txt"); 
	Returns the position of "Some txt" if it contains, otherwise -1;

3. str.lastIndexOf("hello"); 
	Returns the position of last occurrence of the specified text;
	2 & 3 both methods accept a second parameter as the Starting 
	position for the search;
	str.indexOf("Locate", 15);
	The lastIndexOf("Locate", 15) method searches backwards;
	The search Starts at position 15 and searches to beginning of the String;
	
4. str.search("locate");	
	Same as indexOf();
	The search() method cannot take a second start position argument;
	The indexOf() method cannot take powerful search values (Regular expressions);
	

	Extracting String Parts:
	
5. str.slice(start, end); >> extracts a part of a string 
	and returns the extracted part in a new string;
	If a parameter is negative, the position is counted form the end of the string;
	If we omit the second parameter, the method will slice out the rest of string;
	
6. str.substring(start, end); >> same as slice(), but cannot accept negative indexes;
7. str.substr(start, length); >> same as slice(), but second parameter is the length;

8. str.replace("old", "new"); 
	It doesn't change th string it is called on. 
	It returns a new string;
	By default, this method replaces only the first match;
	Case Sensitive;
	str.replace(/MICROSOFT/i, "W3Schools"); Case Insensitive;
	
9. str.toUpperCase(); 
	Convert hole string to uppercase;
	
10. str.concat(" ", "world"); 
	Same as (str + " " + "world");
	
11. str.trim();
	Removes whitespaces from both sides of a string;
	unsuported in IE 8;
	
12. str.charAt(index); 

13. str.charCodeAt(index);

14. str[index];



	Converting a String to an Array:
	
15. str.split(","); 
	Split on commas and returns an array;
	
	
	
	











